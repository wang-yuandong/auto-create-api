import fs from 'fs'
import ejs from 'ejs'
import path from 'path'
import { fileURLToPath } from 'url'

const __filename = fileURLToPath(import.meta.url)
const __dirname = path.dirname(__filename)

const fileHeader = `/* eslint-disable */
/* prettier-ignore */
// @ts-nocheck
// Auto generated By auto-create-api
import { request } from '../request'

`
/**
 * 创建apiName和url
 * @param urlStr
 * @returns {{apiName: string, url: string}}
 */
const createApiNameAndUrl = (urlStr) => {
  const arr = urlStr.split('/').filter(Boolean)
  const nameArr = arr.map((item, index) => {
    let handleStr = item
    if (/^\{.*\}$/g.test(handleStr)) {
      handleStr = item.replace(/\{(\w+)\}/, (_, match) => 'By' + match.charAt(0).toUpperCase() + match.slice(1))
    }
    if (index !== 0) {
      handleStr = handleStr.charAt(0).toUpperCase() + handleStr.slice(1)
    }
    handleStr = handleStr.replace(/[-_]+([a-z])/g, (_, match) => match.toUpperCase())
    return handleStr
  })
  const urlArr = arr.map((item) => {
    return item.replace(/\{(\w+)\}/, '${params.$1}')
  })
  return {
    apiName: nameArr.join('') + 'Api',
    url: urlArr.join('/')
  }
}
/**
 * 创建文件夹
 */
const createDirs = (directoryPath, apiPathObj) => {
  const oldDirNames = fs
    .readdirSync(directoryPath, { withFileTypes: true })
    .filter((item) => item.isDirectory())
    .map((item) => item.name)
  const newDirNames = Object.keys(apiPathObj)
  // 过滤掉相同的文件夹
  const filterNewDirNames = newDirNames.filter((item) => !oldDirNames.includes(item))
  const filterOldDirNames = oldDirNames.filter((item) => !newDirNames.includes(item))
  // 删除旧的文件夹
  for (const item of filterOldDirNames) {
    const currentPath = path.join(directoryPath, item)
    fs.rmSync(currentPath, { recursive: true })
  }
  // 创建新的目录
  for (const item of filterNewDirNames) {
    const currentPath = path.join(directoryPath, item)
    fs.mkdirSync(currentPath)
  }
}
/**
 * 转换api路径为对象
 */
const convertApiPathToObject = (apiPathsJSON) => {
  const obj = {}
  Object.entries(apiPathsJSON).forEach(([key, value]) => {
    const subPathArr = key.split('/')
    const optionsArr = value.split('|')
    const { apiName, url } = createApiNameAndUrl(key)
    const apiOption = {
      apiName,
      url,
      method: optionsArr[0],
      requestType: optionsArr[1] || 'String',
      responseType: optionsArr[2] || 'JSON',
      isAuth: optionsArr[3] === '1'
    }
    const dirName = subPathArr[1]
    const fileName = subPathArr[2]
    if (!obj[dirName]) {
      obj[dirName] = {}
      obj[dirName][fileName] = [apiOption]
    } else {
      if (obj[dirName][fileName]) {
        obj[dirName][fileName].push(apiOption)
      } else {
        obj[dirName][fileName] = [apiOption]
      }
    }
  })
  return obj
}
/**
 * 创建API file
 * @param dirPath 父级目录
 * @param fileExt 文件扩展名
 * @param apiPathObj api路径对象
 * @param templatePath 模板路径
 */
const createApiFile = (dirPath, fileExt, apiPathObj, templatePath) => {
  const template = fs.readFileSync(path.join(__dirname, templatePath), 'utf-8')
  Object.entries(apiPathObj).forEach(([key, value]) => {
    const folderPath = path.join(dirPath, key)
    Object.entries(value).forEach(([subKey, subValue]) => {
      const fileName = `${subKey}.api${fileExt}`
      const filePath = path.join(folderPath, fileName)
      let content = fileHeader
      for (let i = 0; i < subValue.length; i++) {
        content += ejs.render(template, subValue[i])
      }
      fs.writeFileSync(filePath, content)
    })
  })
}

export const createFile = async (options) => {
  console.time('auto-create-api')
  const fileExt = options.ts ? '.ts' : '.js'
  const templatePath = options.ts ? './template.ts.ejs' : './template.ejs'
  try {
    // 解析JSON配置文件
    const fileContent = fs.readFileSync(options.configFilePath, 'utf8')
    const jsonObject = JSON.parse(fileContent)
    const apiPathObj = convertApiPathToObject(jsonObject)
    // 创建文件夹
    createDirs(path.dirname(options.configFilePath), apiPathObj)
    // 根据配置文件创建文件夹和文件
    createApiFile(path.dirname(options.configFilePath), fileExt, apiPathObj, templatePath)
    console.timeEnd('auto-create-api')
    if (options.log) {
      console.log('auto-create-api : success!')
    }
  } catch (e) {
    if (options.log) {
      console.error(`auto-create-api : ${e}`)
    }
  }
}
